import asyncio
import logging

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from config import BOT_TOKEN
import database as db
import keyboards as kb

logging.basicConfig(level=logging.INFO)


class TestStates(StatesGroup):
    in_test = State()


bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# Список вопросов
# Формат: (текст_вопроса, ключ_для_x, текст_кнопки_1, ключ_для_n, текст_кнопки_2)
# ключ_для_x/n: 'x' - увеличивает экстраверсию, 'n' - невротизм, None - ничего
questions = [
    (
        "Хочешь ли ты поскорее испытать что-то новое, непредсказуемое, ради острых ощущений?",
        "x",
        "Да",
        None,
        "Нет",
    ),
    (
        "Отправишься ли ты на поиски тех, с кем можно будет разделить свои чувства и тревоги?",
        "n",
        "Да",
        None,
        "Нет",
    ),
    (
        "На тропинке расстилается мягкая трава, под которой могут скрываться ямы. Доверяешь ли ты своему пути?",
        "x",
        "Да",
        None,
        "Нет",
    ),
    (
        "На высоком дереве, в листве, ты замечаешь созревший плод, но никак не можешь его достать. Внизу растут другие, но тебя манит один.",
        "n",
        "Лезть до последнего",
        None,
        "Переключиться на другие плоды",
    ),
    (
        "Наверное, нужно составить план, как достать заветный фрукт.",
        "x",
        "Я буду импровизировать",
        None,
        "Да, я обдумаю каждый шаг",
    ),
    (
        "Плод все же оказался недостижимо высоко для такого маленького создания. Ты лакомишься тем, что получилось собрать, и смотришь, как мирно течет жизнь: в растениях копошатся насекомые, медленно по небу плывут облака. Ты чувствуешь…",
        "n",
        "Печаль",
        None,
        "Спокойствие",
    ),
    (
        "Под соседним деревом ты видишь родственное тебе создание. От взгляда на него сердце начинает биться чаще. Стоит ли проявить себя?",
        "n",
        "Я очень смущаюсь",
        None,
        "Я сохраняю уверенность в себе",
    ),
    ("Легко ли ты подстроишься под внезапные перемены?", "x", "Да", None, "Нет"),
    (
        "Заденут ли тебя неприятные взгляды и мысли других существ?",
        "n",
        "Да",
        None,
        "Нет",
    ),
    (
        "Увидев стадо подобных тебе существ, поспешишь ли ты присоединиться к веселью?",
        "x",
        "Да",
        None,
        "Нет",
    ),
    (
        "На что похож поток твоей внутренней энергии?",
        "n",
        "Волнующийся океан",
        None,
        "Постоянное, стабильное течение",
    ),
    (
        "Замираешь ли ты в тени деревьев, уносясь мыслями в далёкие, невозможные миры?",
        "n",
        "Да",
        None,
        "Нет",
    ),
    (
        "Оступившись раз, будешь ли ты возвращаться мыслями к случившемуся?",
        "n",
        "Да",
        None,
        "Нет",
    ),
    (
        "Оказавшись в центре табуна, наевшегося забродивших ягод, сможешь ли ты поддаться волне веселья?",
        "x",
        "Да",
        None,
        "Нет",
    ),
    (
        "Лежа под усыпанным звездами небом, слушая стрекот цикад, думаешь ли ты?",
        "n",
        "В голове всплывают моменты прошлого",
        None,
        "Я просто наслаждаюсь тишиной",
    ),
    (
        "Отвоевывая свое место в пищевой цепи, сможешь ли ты стать искусным хищником, учитывающим каждую деталь, каждый шорох, каждое дуновение ветра?",
        "x",
        "Да",
        None,
        "Нет",
    ),
    (
        "Случается ли тебе испытывать эмоции и ощущения в теле, не поддающиеся контролю?",
        "n",
        "Да",
        None,
        "Нет",
    ),
    (
        "Когда все развалились под пекущим полуденным солнцем, чем ты займешься?",
        "x",
        "Интересно, о чем расскажут сородичи",
        None,
        "В спокойствии понаблюдаю за природой",
    ),
    (
        "Прогуливаясь по склону холма, по какой поступи тебя можно узнать?",
        "x",
        "Я скачу быстро, моя реакция быстра",
        None,
        "Я спускаюсь плавно и неторопливо",
    ),
    (
        "Чувствуешь ли ты пустоту внутри, находясь вдали от сородичей?",
        "x",
        "Да",
        None,
        "Нет",
    ),
    (
        "Возвращаясь ночью к месту ночлега, остерегаешься ли ты темноты и шороха?",
        "n",
        "Да",
        None,
        "Я не сомневаюсь в своей безопасности",
    ),
    (
        "Среди других существ, предпочитаешь ли ты слушать и наблюдать?",
        "x",
        "Нет",
        None,
        "Да",
    ),
    (
        "Видя, что твои сородичи угнетены тяжелым днем, станешь ли ты разжигать в них искру веселья?",
        "x",
        "Да",
        None,
        "Я дам им личное пространство",
    ),
    (
        "Прислушиваешься ли ты к телу, тревожась о его знаках и ощущениях?",
        "n",
        "Да",
        None,
        "Нет",
    ),
]


# Функция для получения результата на основе баллов
def get_result(x, n):
    # Меланхолики (преимущественно Интроверсия + Неустойчивость)
    if 1 <= x <= 3 and 10 <= n <= 12:
        return (
            "Тип: Тревожный меланхолик-интроверт\nТотем: Грустный тушканчик",
            "Ты глубоко чувствующий и легкоранимый, склонен к уединению и размышлениям. Ты воспринимаешь мир на невероятно глубоком уровне, и каждый резкий взгляд или слово могут по-настоящему зацепить тебя. Тебя легко задеть, и ты часто прячешься в норку, когда что-то идёт не так. Но именно из этой чувствительности рождается твоя способность к утончённому восприятию мира. Ты чувствуешь, когда кто-то нуждается в поддержке, и именно твоя способность к эмпатии помогает тебе быть рядом, даже когда ты сам переживаешь за что-то. Мир кажется тебе пугающим, а одиночество — чуть менее страшным, чем быть не понятым. Ты бережно охраняешь своё внутреннее пространство и можешь замечать даже самые тонкие изменения в настроении.",
            "1.грустный тушканчик.jpg",
        )
    elif 1 <= x <= 3 and 8 <= n <= 9:
        return (
            "Тип: Меланхолик-интроверт (умеренный)\nТотем: Задумчивая косуля",
            "Ты предпочитаешь покой и мечтательность, наблюдая за миром со стороны. Ты не ищешь шумных компаний. Ты не жаждешь внимания и суеты — тебе по душе уединённые тропинки и тихие рассветы. Твоя душа стремится к спокойствию и глубине, и ты часто находишь своё утешение в природе, где можешь по-настоящему быть собой, не опасаясь внешних тревог. Эмоции приходят волнами, иногда увлекая тебя в печаль. Но в этом есть красота: ты глубоко чувствуешь мир и видишь то, что ускользает от других. Ты мечтатель, который вглядывается в мир с мудростью и пониманием.",
            "2.Задумчивая косуля.png",
        )
    elif 4 <= x <= 5 and 10 <= n <= 12:
        return (
            "Тип: Невротичный меланхолик-интроверт\nТотем: Прячущий голову страус",
            "Ты хочешь действовать, но часто сомневаешься в себе. Ты ощущаешь мир громким и колючим. В компании порой неуютно, эмоции накрывают лавиной. Непредсказуемый мир вызывает страх, и тебе спокойнее скрыться от него. Но за уязвимостью таится большая внутренняя жизнь. Ты мечтаешь, размышляешь, переживаешь. Твоя задача — научиться доверять себе и миру. Ты умеешь сочувствовать, замечать боль — но себе заботы даёшь мало. Прими себя и мир вокруг – он стоит того, чтобы высунуть голову навстречу веселью!",
            "3.Прячущий голову страус.png",
        )
    elif 4 <= x <= 5 and 8 <= n <= 9:
        return (
            "Тип: Мечтательный интроверт меланхолик\nТотем: Робкий ежевичный медвежонок",
            "Ты — как медвежонок, тихий и задумчивый. Душа – словно река, в которой отражаются звезды. Внутренний мир полон ценных мыслей и мечтаний, но так тяжело поймать их: протянешь лапу – и они, как отражения, растворяются в речной ряби. Ты не любишь суету и стараешься не привлекать лишнего внимания, хотя порой чувствуешь, что хочешь быть понятым. \nТы можешь выглядеть сдержанным или даже немного замкнутым, но внутри ты ищешь заботы и тепла. Чтобы осознать свою медвежью суть, тебе нужно понять: настоящая сила приходит через принятие себя, своих слабостей и сомнений.",
            "29.Ежевичный медвежонок.png",
        )
    elif 1 <= x <= 3 and 6 <= n <= 7:
        return (
            "Тип: Меланхолик-интроверт\nТотем: Задумчивый филин",
            "Ты предпочитаешь тишину, в которой можешь услышать свои мысли и понять, что действительно важно. Ты часто погружён в раздумья и размышления. Ты не любишь быть в центре внимания, предпочитая тихо наблюдать и анализировать происходящее, чтобы понимать, куда двигаться дальше. Мир кажется тебе сложным и многогранным, и ты занят разгадкой его смысла. Часть ответов уже пришли к тебе, и это позволяет быть стабильным, даже когда вокруг бушует буря. Твоя сила — в спокойствии и умении видеть картину целиком, не делая поспешных выводов.",
            "20. Задумчивый филин.png",
        )
    elif 4 <= x <= 5 and 6 <= n <= 7:
        return (
            "Тип: Чуткий интроверт (Меланхолик)\nТотем: Тихий лемур",
            "Уравновешенный, чуткий к среде, ты раскрываешься в тёплом кругу друзей. Ты чутко воспринимаешь атмосферу, легко чувствуешь изменения в настроении людей, но при этом остаёшься в тени, позволяя другим быть в центре внимания. Ты интроверт, и твоё уединение — это пространство для внутреннего роста и размышлений. В кругу близких ты чувствуешь себя естественно, но предпочитаешь не привлекать лишнего внимания. Ты не стремишься быть в центре событий, но твоя чуткость и внимательность делают тебя незаменимым для тех, кто тебя ценит.",
            "21. Тихий лемур.png",
        )

    # Флегматики (преимущественно Интроверсия + Устойчивость)
    elif 1 <= x <= 3 and 1 <= n <= 3:
        return (
            "Тип: Мудрый интроверт-флегматик\nТотем: Мховая черепашка",
            "Спокойный философ. Ты медлителен, созерцателен, не поддаёшься панике.  Ты не спешишь, предпочитая наблюдать и размышлять. В тебе есть внутренняя сила и стойкость, с которыми ты встречаешь сюрпризы жизни. Тебе не нужно общество, чтобы чувствовать себя целостно. Ты не спешишь делиться своими мыслями, но если решаешься — говоришь от сердца. Ты не суетишься, потому что знаешь: в мире есть место и для тишины, и для размышлений. Мудрая, спокойная душа, ты знаешь: главная опора – внутри. И она никогда не подведет близких людей.",
            "6.Мховая черепашка.png",
        )
    elif 4 <= x <= 5 and 1 <= n <= 3:
        return (
            "Тип: Спокойный наблюдатель-флегматик\nТотем: Мечтательный додо",
            "Ты живёшь в гармонии. В тебе нет спешки или тревог. Твоя уверенность в себе рождается не из внешних успехов, а из тихого знания, что ты на своём месте. Ты любишь свои привычные маршруты и не спеша вкушаешь прелести жизни. Каждый день – это подарок, который не нужно спешить раскрывать, а можно наслаждаться, шаг за шагом, вдох за вдохом.",
            "7.Мечтательный додо.png",
        )
    elif 1 <= x <= 3 and 4 <= n <= 5:
        return (
            "Тип: Спокойный интроверт-флегматик\nТотем: Оленёнок в тумане",
            "Ты мягкий и наблюдательный, не спешишь проявляться и выбираешь уединённые тропинки. Это естественная осторожность и стремление к гармонии. Ты умеешь слушать, ценишь тишину, внутреннюю устойчивость и спокойствие. Мир для тебя — это поле для созерцания, где каждый момент и каждая деталь имеют значение. Твоя спокойная энергия создаёт вокруг тебя атмосферу, в которой людям легко быть собой.",
            "14.Оленёнок в тумане.png",
        )
    elif 4 <= x <= 5 and 4 <= n <= 5:
        return (
            "Тип: Уравновешенный интроверт-флегматик\nТотем: Бобёр-строитель",
            "Ты тихий, устойчивый и продуктивный. Привык полагаться на себя и действовать обдуманно. Ты строишь плотины там, где другим не хватит терпения. В тебе чувствуется надёжность, хотя ты редко открываешь свои эмоции. Ты ценишь стабильность и порядок в жизни, и строишь свои отношения, карьеру и цели с прочным основанием. В тебе есть глубокая внутренняя сила, и ты всегда знаешь, когда стоит сделать паузу, чтобы набраться сил.",
            "15.Бобёр строитель.png",
        )

    # Сангвиники (преимущественно Экстраверсия + Устойчивость)
    elif x == 6 and 4 <= n <= 5:
        return (
            "Тип: Умеренный экстраверт (Сангвиник)\nТотем: Енот-исследователь",
            "Ты не жаждешь быть в центре внимания, но легко находишь контакт с другими. В тебе сочетаются любознательность и внутренняя устойчивость. Ты как енот, который с удовольствием исследует окрестности, но всегда возвращается в своё гнездо. Спокойный и гибкий, ты открыт для общения и легко находишь общий язык с людьми. Ты умеешь поддерживать живые и интересные беседы, но, несмотря на общительность, ты ценишь баланс между внешней активностью и внутренним временем для размышлений и восстановления. Ты легко адаптируешься к изменениям и не боишься новых начинаний, но при этом всегда остаёшься верным себе и своим внутренним убеждениям.",
            "16.Енот-исследователь.png",
        )
    elif 6 <= x <= 7 and 1 <= n <= 3:
        return (
            "Тип: Стойкий экстраверт-сангвиник\nТотем: Спокойный кайман",
            "Ты обладаешь внутренней невозмутимостью. Тебя сложно задеть, но про себя ты подмечаешь многое — просто не тратишь силы попусту, контролируя свои эмоции. Ты способен быть активным, но без суеты. Ты не бросаешься за первое попавшееся дело. Ты тщательно выбираешь цель и идешь к ней, не поддаваясь на искушения жизни. Окружающие чувствуют в тебе силу и выдержку: среди них ты пользуешься уважением и вызываешь доверие. Ты уверенно держишь курс и можешь повести за собой.",
            "8.Спокойный кайман.png",
        )
    elif 8 <= x <= 10 and 1 <= n <= 3:
        return (
            "Тип: Радостный и лёгкий экстраверт-сангвиник\nТотем: Солнечный ара",
            "Жизнь — твоя сцена, и ты с уверенностью её осваиваешь, наполняя её радостью и своей энергией. Для тебя не нужно много поводов, чтобы быть счастливым — сама возможность быть здесь и сейчас уже приносит удовольствие. Ты открыт для общения, легко находишь общий язык с людьми, обладаешь харизмой. Ты не боишься быть собой и гордишься своей уникальностью. Ты умеешь вдохновлять, зажигать других своим примером, и даже в самых сложных ситуациях остаёшься оптимистом. Ты не нуждаешься в лишней драме, чтобы почувствовать себя важным. Твоя способность быть искренним и лёгким делает тебя незаменимым центром любых событий, где бы ты ни оказался.",
            "12.Солнечный ара.png",
        )
    elif 9 <= x <= 12 and 1 <= n <= 4:
        return (
            "Тип: Артистичный экстраверт-сангвиник\nТотем: Лучезарный попугай",
            "Весёлый и разговорчивый, ты даришь яркие эмоции и доброту. Ты блистаешь, сверкаешь, любишь быть увиденным. За внешней яркостью — внутренняя эмоциональная стабильность. Ты не прячешься от мира, и при этом не теряешь себя. В тебе живёт ребёнок, которому радостно просто жить, быть самим собой и играть. Тебе дано вдохновлять других и заряжать оптимизмом.",
            "9.Лучезарный попугай.png",
        )
    elif 11 <= x <= 12 and 1 <= n <= 3:
        return (
            "Тип: Лучезарный экстраверт-сангвиник\nТотем: Танцующий колибри",
            "Лёгкий, быстрый, ты перелетаешь от цветка к цветку, принося радость и искры жизни. Твоя энергия буквально наполняет воздух, и в твоём присутствии все вокруг чувствуют себя живее и радостнее.\nТебе легко проявляться, ты быстро находишь общий язык с окружающими. Психологически ты устойчив, уверенно опираешься на свои внутренние ресурсы. Готов быть в центре внимания — просто потому, что тебе весело. В тебе есть лёгкость, которая позволяет быть в гармонии с собой, даже в окружении толпы.",
            "13.Танцующий колибри.png",
        )
    elif 7 <= x <= 9 and 4 <= n <= 5:
        return (
            "Тип: Радостный и лёгкий экстраверт-сангвиник\nТотем: Любознательная лиса",
            "Ты — как любознательная лиса, всегда в поиске нового и интересного. Ты подвижен, остроумен и стремишься познать новое, но умеешь быть осмотрительным. Ты лёгок, игрив, умеешь шутить и вдохновлять других. Ты чутко понимаешь других и умеешь быть рядом по-настоящему. Ты способен быть другом и поддержкой.",
            "18. Любознательная лиса.png",
        )
    elif 10 <= x <= 12 and 4 <= n <= 5:
        return (
            "Тип: Вдохновляющий экстраверт-сангвиник\nТотем: Шумный павлин",
            "Праздник в форме зверя. Обожаешь внимание, быстро включаешься в любую активность, умеешь блистать и светить другим. Ты артистичный и харизматичный, любишь яркость и свободу в самовыражении. При этом умеешь сохранять внутренний баланс и не теряешь себя в суете. Ты — тот, кто может зажечь толпу и при этом остаться спокойным внутри.",
            "19. Шумный павлин.png",
        )

    # Холерики (преимущественно Экстраверсия + Неустойчивость)
    elif 10 <= x <= 12 and 10 <= n <= 12:
        return (
            "Тип: Холерик-экстраверт\nТотем: Неудержимый гепард",
            "Ты — яркий, быстрый, импульсивный. Тебе сложно долго сидеть на месте. Твоё сердце горит, ты дерзкий, страстный, и иногда очень ранимый. Тебя кидает из крайности в крайность, ты стремишься к приключениям и не боишься рисковать. Жизнь — это гонка, и ты всегда готов рвануть вперёд, не оглядываясь. Внутренние противоречия могут сбивать с курса, но они делают тебя живым и искренним в проявлениях. Иногда тебе не хватает паузы, чтобы перевести дыхание и порефлексировать.",
            "10.Неудержимый гепард.png",
        )
    elif 7 <= x <= 8 and 6 <= n <= 7:
        return (
            "Тип: Чувствительный экстраверт-холерик\nТотем: Горный козлик",
            "Ты активен, но умеешь удерживать равновесие даже на самых крутых склонах. Как горный козлик, ты способен легко преодолевать препятствия и адаптироваться к изменениям, оставаясь уверенным и уравновешенным.\nТы не боишься действовать, идти за своими желаниями и следовать своим целям, но всегда в поисках гармонии. Ты легко находишь контакт с другими, но в то же время ценишь моменты личной свободы и время для восстановления. Твоя сильная сторона — это способность вдохновлять и вести за собой, не забывая при этом сохранять внутренний баланс.",
            "11.Горный козлик.png",
        )
    elif 9 <= x <= 10 and 6 <= n <= 7:
        return (
            "Тип: Яркий и чувствительный экстраверт-холерик\nТотем: Весёлый хорёк",
            "С природной ловкостью и весёлым нравом, ты превращаешь в игру даже рутину. Каждое твое действие наполнено динамикой, и ты не боишься добавить в свою жизнь немного фокусов и неожиданностей. Ты видишь в жизни радость, даже в мелочах, и стараешься делать её ярче для себя и для других. Несмотря на свою подвижность и активность, ты умеешь сохранять внутреннее равновесие. Ты яркий экстраверт, но твоя чувствительность помогает тебе быть внимательным к окружающим. Ты чувствуешь настроение людей и подстраиваешься под него, создавая атмосферу легкости и уюта, где все могут быть собой.",
            "22. Веселый хорек.png",
        )
    elif 10 <= x <= 12 and 6 <= n <= 7:
        return (
            "Тип: Холерик-экстраверт\nТотем: Искристый светлячок",
            "Твой свет проявляется во тьме, и ты сияешь, ведя за собой людей. Ты легко находишь общий язык с людьми и создаёшь волшебную атмосферу, в которой людям открывается ощущение чуда. Иногда ты переживаешь, все ли делаешь правильно. Ответственность может давить на тебя, свет – перегорать. Но его вновь заряжают люди рядом. Тебе важно дарить свою внутреннюю энергию миру и получать его – в ответ.",
            "23. Искристый светлячок.png",
        )
    elif 6 <= x <= 7 and 8 <= n <= 9:
        return (
            "Тип: Эмпатичный деятель холерик\nТотем: Тревожный сурикат",
            "Ты всегда на чеку, всегда в поиске чего-то важного. Твои глаза сканируют мир вокруг, и ты замечаешь даже самые мелкие детали. Ты внимателен к нуждам других и всегда готов прийти на помощь, даже если это требует от тебя многого.\nТы действуешь быстро, решительно и с полной отдачей. Ты можешь руководить и брать на себя ответственность, но при этом часто оказываешься уязвимым, ведь чувствуешь настроения людей рядом, а иногда – принимаешь их за свои. Тебе свойственны сомнения в себе и своих действиях. Тебе важно чувствовать, что ты нужен, что твоя забота и внимание ценятся, но страх разочаровать других часто мешает тебе расслабиться. Твой богатый мир эмоций и мыслей – это твой настоящий источник силы, если ты научишься защищать его от внешнего давления.",
            "24. Тревожный сурикат.png",
        )
    elif 8 <= x <= 9 and 8 <= n <= 9:
        return (
            "Тип: Энергичный и восприимчивый холерик\nТотем: Электрический хорёк",
            "Ты как вспышка: действуешь, пока горишь, потом — резко уходишь в тень. Тебе сложно усидеть на месте, и сложно не принимать всё близко к сердцу. Но в этом — твоя живость, твоя жажда настоящего. Твой темперамент — это смесь огненной энергии и сильной эмоциональной восприимчивости. Ты живешь в моменте, отзываясь на события с максимальной интенсивностью. В моменты стресса или конфликта, ты можешь легко вспыхнуть, но так же быстро можешь остыть, уходя в себя, чтобы восстановить силы. Учиться балансировать свою эмоциональную энергию и сохранять внутреннюю гармонию — вот твой путь. Ты способен на большие поступки, но важно понимать, как поддерживать внутренний огонь и не дать ему потухнуть.",
            "25.Электрический хорёк.jpg",
        )
    elif 10 <= x <= 12 and 8 <= n <= 9:
        return (
            "Тип: Артистичный и ранимый холерик\nТотем: Импульсивный мангуст",
            "Ты — как искра, которая вспыхивает так быстро, что не всегда успеешь понять, куда она выстрелит. Ты действуешь быстро, порой не думая о последствиях, потому что жизнь — это сцена, где важно быть замеченным, где каждое мгновение стоит прожить на полную катушку.\n\nТы артист по натуре, тебе нужно, чтобы тебя видели, чтобы твоя энергия и страсть зажигали других. Несмотря на внешнюю уверенность, внутри ты можешь быть ранимым. Любая критика может ранить до глубины души, и ты можешь долго переживать из-за неё, накручивая себя, пуская мысли по кругу. Твоя способность быть в центре внимания — это твоя сила, но важно не забывать, что даже самый яркий огонь нуждается в отдыхе, границах и заботе о себе.",
            "26. Импульсивный мангуст.png",
        )
    elif 6 <= x <= 7 and 10 <= n <= 12:
        return (
            "Тип: Уязвимый деятель холерик\nТотем: Волнующийся тюлень",
            "Ты — как волнующийся тюлень, всегда в поисках того, как сделать мир немного лучше. Твои действия полны энергии, ты стремишься быть полезным и отдавать все свои силы, но внутри тебя часто бушуют штормы тревог и сомнений. Ты переживаешь за каждую мелочь, боишься не оправдать ожидания, но стараешься скрыть это от других, потому что хочешь выглядеть уверенно.\nОкружающим может казаться, что ты безупречно справляешься с задачами, но в душе ты постоянно борешься с волнами эмоций, которые могут накрывать тебя в самый неожиданный момент. Ты любишь помогать другим, но важно помнить, что твое тепло и забота должны быть направлены и на тебя самого.",
            "27.Волнующийся тюлень.png",
        )
    elif 8 <= x <= 9 and 10 <= n <= 12:
        return (
            "Тип: Перегорающий оптимист холерик\nТотем: Белка в колесе",
            "В тебе кипит энергия, словно вечный двигатель: ты легко загораешься идеями, но так же быстро можешь перегореть. Твоё сердце бьётся в ритме барабана, и этот ритм слышат все вокруг. Ты боишься остановки — ведь вместе с ней может прийти пустота и чувство, что ты не справился. Но именно в твоей пылкости — твоя сила. Ты умеешь вдохновлять, заряжать окружающих, даже если внутри сам чувствуешь усталость.\nТы можешь быть вспыльчивым и нетерпеливым, но никто не сомневается — рядом с тобой никогда не будет скучно.",
            "28.Белка в колесе.png",
        )

    # Центральные / Сбалансированные типы
    elif x == 6 and n == 6:
        return (
            "Тотем: Медитирующая капибара",
            "Центр спокойствия. Ты не поддаёшься бурям, окружая себя миром и принятием.\nТы находишься в центре координат: не склоняешься ни в одну крайность. Тебе не нужно выбирать одну сторону, ведь истина многогранна. Ты можешь быть гибким и адаптироваться, оставаясь верным себе. Ты не скрываешь свои эмоции, но и не позволяешь им взять верх. Ты знаешь, что для внутреннего равновесия важно не избегать проблем, а научиться с ними мирно сосуществовать. Тебе комфортно и в компании, и наедине с собой. Ты умеешь замедляться, чувствуешь ритмы и слышишь тишину. Способность быть разным — твоя сила.",
            "4.Медитирующая капибара.jpeg",
        )

    # Общая логика, если ни один диапазон не подошел
    else:
        intro_extra = "Экстраверсия" if x > 6 else "Интроверсия"
        neuro_stability = (
            "эмоционально неустойчивый тип личности"
            if n > 6
            else "эмоциональная устойчивость"
        )

        result_type = ""
        if "Интроверсия" in intro_extra and "неустойчивый" in neuro_stability:
            result_type = "Меланхолик"
        elif "Интроверсия" in intro_extra and "устойчивость" in neuro_stability:
            result_type = "Флегматик"
        elif "Экстраверсия" in intro_extra and "неустойчивый" in neuro_stability:
            result_type = "Холерик"
        elif "Экстраверсия" in intro_extra and "устойчивость" in neuro_stability:
            result_type = "Сангвиник"

        return (
            f"Ваш результат",
            f"Баллы экстраверсии (x): {x}\nБаллы невротизма (n): {n}\n\nТип личности: {result_type} ({intro_extra}, {neuro_stability})",
        )


# Обработчик команды /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    user = message.from_user

    # Проверяем, есть ли пользователь уже в базе данных
    subscription = db.get_user_subscription(user.id)

    # Приветственное сообщение
    welcome_message = (
        f"Привет, {user.first_name}!\n\n"
        "Начни путешествие к себе в телеграм mini-app ИКИ: календарь эмоций, заметки о событиях, "
        "а в будущем — интерактивные истории.\n\n"
        "🔔 Хочешь, чтобы я напоминал тебе каждый день вести дневник эмоций?\n"
        "Выбери удобное время или отключи уведомления в любой момент.\n\n"
        "Открывай приложение, чтобы отметить, как ты себя чувствуешь сегодня.\n\n"
        "Хочешь пройти наше тестирование? Напиши /test в чат.\n\n"
        "Подписывайся на наш канал, чтобы быть в курсе новостей и оставлять обратную связь: "
        "https://t.me/ikiproject"
    )

    if not subscription:
        await message.answer(welcome_message, reply_markup=kb.get_subscribe_keyboard())

    else:
        await message.answer(welcome_message)


# Обработчик команды /test
@dp.message(Command("test"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    user_first_name = message.from_user.first_name

    # Атмосферный текст
    await message.answer(
        "Ты впервые открыл глаза. Перед тобой – целый мир: цветущий, благоухающий, "
        "окутанный молочным материнским ароматом. Ты делаешь первые шаги, "
        "чтобы узнать, кем ты воплотился на этот раз."
    )

    # Кнопка "Начать тестирование"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="🚀 Начать тестирование", callback_data="start_test"
                )
            ]
        ]
    )

    await message.answer("Готовы начать тестирование?", reply_markup=keyboard)


# Обработчик команды /settings
@dp.message(Command("settings"))
async def cmd_settings(message: types.Message):
    user_id = message.from_user.id
    subscription = db.get_user_subscription(user_id)

    text = "⚙️ **Настройки напоминаний**\n\n"
    if subscription and subscription[0]:
        text += f"Текущее время напоминаний: *{subscription[1]}*"
    else:
        text += "У вас отключены напоминания."

    await message.answer(
        text, reply_markup=kb.get_settings_keyboard(subscription), parse_mode="Markdown"
    )


@dp.callback_query(F.data == "subscribe")
async def cb_subscribe(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "Отлично! Выбери удобное время для напоминаний:",
        reply_markup=kb.get_time_selection_keyboard(),
    )
    await callback.answer()


@dp.callback_query(F.data.startswith("set_time_"))
async def cb_set_time(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    notification_time = callback.data.split("_")[2]
    db.add_or_update_user(user_id, subscribed=True, notification_time=notification_time)

    await callback.message.edit_text(
        f"✅ Напоминания включены! Я буду присылать их ежедневно в {notification_time}."
    )
    await callback.answer(text="Настройки сохранены!", show_alert=False)


@dp.callback_query(F.data == "unsubscribe")
async def cb_unsubscribe(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    db.add_or_update_user(user_id, subscribed=False, notification_time=None)

    await callback.message.edit_text(
        "🚫 Напоминания отключены. Вы всегда можете включить их снова через /settings."
    )
    await callback.answer()


@dp.callback_query(F.data == "change_time")
async def cb_change_time(callback: types.CallbackQuery):
    # Эта кнопка функционально идентична 'subscribe'
    await cb_subscribe(callback)


# Обработчик нажатия на кнопку "Начать"
@dp.callback_query(lambda c: c.data == "start_test")
async def process_start_test(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(TestStates.in_test)

    await state.update_data(question_index=0, x=0, n=0)

    q_index = 0
    question_text, key1, text1, key2, text2 = questions[q_index]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=text1, callback_data=f"ans_{q_index}_1")],
            [InlineKeyboardButton(text=text2, callback_data=f"ans_{q_index}_2")],
        ]
    )

    await callback_query.message.edit_text(question_text, reply_markup=keyboard)
    await callback_query.answer()


# Обработчик ответов на вопросы
@dp.callback_query(TestStates.in_test, lambda c: c.data.startswith("ans_"))
async def process_answer(callback_query: types.CallbackQuery, state: FSMContext):
    _, q_index_str, ans_index_str = callback_query.data.split("_")
    q_index = int(q_index_str)
    ans_index = int(ans_index_str)

    data = await state.get_data()
    x = data.get("x", 0)
    n = data.get("n", 0)

    _, key1, _, key2, _ = questions[q_index]
    if ans_index == 1 and key1:
        if key1 == "x":
            x += 1
        elif key1 == "n":
            n += 1
    elif ans_index == 2 and key2:
        if key2 == "x":
            x += 1
        elif key2 == "n":
            n += 1

    next_q_index = q_index + 1
    await state.update_data(question_index=next_q_index, x=x, n=n)

    if next_q_index < len(questions):

        question_text, _, text1, _, text2 = questions[next_q_index]
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=text1, callback_data=f"ans_{next_q_index}_1"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=text2, callback_data=f"ans_{next_q_index}_2"
                    )
                ],
            ]
        )

        await callback_query.message.edit_text(question_text, reply_markup=keyboard)
    else:

        await callback_query.message.edit_text(
            "Наконец, после долгого путешествия, ты нашел сверкающий водоем. В нем на тебя смотрит отражение – ты нашел себя."
        )

        title, description, image_filename = get_result(x, n)
        final_text = f"И ты…\n\n*{title}*\n\n{description}"

        if image_filename:
            # Формируем путь к файлу
            image_path = f"jpg/{image_filename}"
            await bot.send_photo(
                chat_id=callback_query.message.chat.id,
                photo=FSInputFile(image_path),
                caption=final_text,
                parse_mode="Markdown",
            )
        else:
            # Если картинки нет, отправляем только текст
            await callback_query.message.answer(final_text, parse_mode="Markdown")

        await state.clear()

    await callback_query.answer()


async def send_reminder(bot: Bot, time_str: str):
    users = db.get_subscribed_users_by_time(time_str)

    builder = InlineKeyboardBuilder()
    builder.button(
        text="📝 Открыть дневник", url="https://t.me/ikiproject"
    )  # Замените URL

    for user_id in users:
        try:
            await bot.send_message(
                user_id,
                "Не забудь отметить, как ты себя чувствуешь сегодня ✨",
                reply_markup=builder.as_markup(),
            )
        except Exception as e:
            logging.error(f"Не удалось отправить сообщение пользователю {user_id}: {e}")


async def main():
    db.init_db()

    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(
        send_reminder,
        trigger="cron",
        hour=9,
        minute=0,
        kwargs={"bot": bot, "time_str": "09:00"},
    )
    scheduler.add_job(
        send_reminder,
        trigger="cron",
        hour=14,
        minute=0,
        kwargs={"bot": bot, "time_str": "14:00"},
    )
    scheduler.add_job(
        send_reminder,
        trigger="cron",
        hour=20,
        minute=0,
        kwargs={"bot": bot, "time_str": "20:00"},
    )
    scheduler.start()

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
